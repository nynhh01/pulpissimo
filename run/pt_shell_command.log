#@ # 
#@ # Running pt_shell Version T-2022.03-SP3 for linux64 -- Jul 12, 2022
#@ # Date:   Fri Feb 14 16:31:42 2025
#@ # Run by: linhnt_66d@giants
#@ 

source /home/tools/synopsys/prime/T-2022.03-SP3/admin/setup/.synopsys_pt.setup
#@ # -- Starting source /home/tools/synopsys/prime/T-2022.03-SP3/admin/setup/.synopsys_pt.setup

#@ #
#@ # .synopsys_pt.setup: Initialization File for PrimeTime
#@ #
#@ 
#@ 
#@ #
#@ # Enable stack trace output on fatal.  Not available for all architectures.
#@ #
#@ if { $sh_arch == "sparcOS5" || $sh_arch == "hpux10" || \
#@      $sh_arch == "hp32" || $sh_arch == "linux" } {
#@   set_unix_variable SYNOPSYS_TRACE ""
#@ }
#@ 
#@ #
#@ # Variable settings
#@ #
#@ 
#@ #
#@ # Synopsys strongly recommends that you use new variable message
#@ # tracing for debugging purposes only.
#@ #
#@ set sh_new_variable_message true
#@ 
#@ #
#@ # Synopsys strongly recommends that you uncomment the following command
#@ # in order to set sh_command_abbrev_mode to the value "Command-Line-Only".
#@ # Command abbreviation is intended as an interactive convenience.  Using
#@ # abbreviations in scripts can cause commands to fail in subsequent releases.
#@ # 
#@ #set sh_command_abbrev_mode "Command-Line-Only"
#@ 
#@ #
#@ # Some useful aliases
#@ #
#@ alias list_commands		help
#@ alias report_constraints	report_constraint
#@ alias report_clocks		report_clock
#@ 
#@ #
#@ # The alias for get_clock was added when get_clock_network_objects
#@ # was introduced, as it conflicts with get_clocks (and get_clock is a
#@ # typical abbreviation for get_clocks)
#@ #
#@ alias get_clock get_clocks
#@ 
#@ 
#@ #
#@ #
#@ # The alias of q to quit is commented out.  Remove the comment 
#@ # character if you want this alias.  Some users find that having 
#@ # this particular alias causes problems when mixed with page-mode
#@ # for reports - an accidental repeated 'q' not only cancels the
#@ # output but exits the tool.
#@ #
#@ #alias q quit
#@ 
#@ # -- End source /home/tools/synopsys/prime/T-2022.03-SP3/admin/setup/.synopsys_pt.setup

#@ # -- Starting source /home/tools/synopsys/prime/T-2022.03-SP3/auxx/tcllib/lib/itcl4.2.1/itcl.tcl

#@ #
#@ # itcl.tcl
#@ # ----------------------------------------------------------------------
#@ # Invoked automatically upon startup to customize the interpreter
#@ # for [incr Tcl].
#@ # ----------------------------------------------------------------------
#@ #   AUTHOR:  Michael J. McLennan
#@ #            Bell Labs Innovations for Lucent Technologies
#@ #            mmclennan@lucent.com
#@ #            http://www.tcltk.com/itcl
#@ # ----------------------------------------------------------------------
#@ #            Copyright (c) 1993-1998  Lucent Technologies, Inc.
#@ # ======================================================================
#@ # See the file "license.terms" for information on usage and
#@ # redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ 
#@ proc ::itcl::delete_helper { name args } {
#@     ::itcl::delete object $name
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ #  USAGE:  local <className> <objName> ?<arg> <arg>...?
#@ #
#@ #  Creates a new object called <objName> in class <className>, passing
#@ #  the remaining <arg>'s to the constructor.  Unlike the usual
#@ #  [incr Tcl] objects, however, an object created by this procedure
#@ #  will be automatically deleted when the local call frame is destroyed.
#@ #  This command is useful for creating objects that should only remain
#@ #  alive until a procedure exits.
#@ # ----------------------------------------------------------------------
#@ proc ::itcl::local {class name args} {
#@     set ptr [uplevel [list $class $name] $args]
#@     uplevel [list set itcl-local-$ptr $ptr]
#@     set cmd [uplevel namespace which -command $ptr]
#@     uplevel [list trace variable itcl-local-$ptr u \
#@         "::itcl::delete_helper $cmd"]
#@     return $ptr
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # Define Itcl commands that will be recognized by the auto_mkindex
#@ # parser in Tcl...
#@ #
#@ 
#@ #
#@ # USAGE:  itcl::class name body
#@ # Adds an entry for the given class declaration.
#@ #
#@ foreach __cmd {itcl::class class itcl::type type ictl::widget widget itcl::widgetadaptor widgetadaptor itcl::extendedclass extendedclass} {
#@     auto_mkindex_parser::command $__cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@ 
#@ 	variable parser
#@ 	variable contextStack
#@ 	set contextStack [linsert $contextStack 0 $name]
#@ 	$parser eval $body
#@ 	set contextStack [lrange $contextStack 1 end]
#@     }
#@ }
#@ # -- Starting source /home/tools/synopsys/prime/T-2022.03-SP3/auxx/tcllib/lib/tcl8.6/auto.tcl

#@ # auto.tcl --
#@ #
#@ # utility procs formerly in init.tcl dealing with auto execution of commands
#@ # and can be auto loaded themselves.
#@ #
#@ # Copyright (c) 1991-1993 The Regents of the University of California.
#@ # Copyright (c) 1994-1998 Sun Microsystems, Inc.
#@ #
#@ # See the file "license.terms" for information on usage and redistribution of
#@ # this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ #
#@ 
#@ # auto_reset --
#@ #
#@ # Destroy all cached information for auto-loading and auto-execution, so that
#@ # the information gets recomputed the next time it's needed.  Also delete any
#@ # commands that are listed in the auto-load index.
#@ #
#@ # Arguments:
#@ # None.
#@ 
#@ proc auto_reset {} {
#@     global auto_execs auto_index auto_path
#@     if {[array exists auto_index]} {
#@ 	foreach cmdName [array names auto_index] {
#@ 	    set fqcn [namespace which $cmdName]
#@ 	    if {$fqcn eq ""} {
#@ 		continue
#@ 	    }
#@ 	    rename $fqcn {}
#@ 	}
#@     }
#@     unset -nocomplain auto_execs auto_index ::tcl::auto_oldpath
#@     if {[catch {llength $auto_path}]} {
#@ 	set auto_path [list [info library]]
#@     } elseif {[info library] ni $auto_path} {
#@ 	lappend auto_path [info library]
#@     }
#@ }
#@ 
#@ # tcl_findLibrary --
#@ #
#@ #	This is a utility for extensions that searches for a library directory
#@ #	using a canonical searching algorithm. A side effect is to source the
#@ #	initialization script and set a global library variable.
#@ #
#@ # Arguments:
#@ # 	basename	Prefix of the directory name, (e.g., "tk")
#@ #	version		Version number of the package, (e.g., "8.0")
#@ #	patch		Patchlevel of the package, (e.g., "8.0.3")
#@ #	initScript	Initialization script to source (e.g., tk.tcl)
#@ #	enVarName	environment variable to honor (e.g., TK_LIBRARY)
#@ #	varName		Global variable to set when done (e.g., tk_library)
#@ 
#@ proc tcl_findLibrary {basename version patch initScript enVarName varName} {
#@     upvar #0 $varName the_library
#@     global auto_path env tcl_platform
#@ 
#@     set dirs {}
#@     set errors {}
#@ 
#@     # The C application may have hardwired a path, which we honor
#@ 
#@     if {[info exists the_library] && $the_library ne ""} {
#@ 	lappend dirs $the_library
#@     } else {
#@ 	# Do the canonical search
#@ 
#@ 	# 1. From an environment variable, if it exists.  Placing this first
#@ 	#    gives the end-user ultimate control to work-around any bugs, or
#@ 	#    to customize.
#@ 
#@         if {[info exists env($enVarName)]} {
#@             lappend dirs $env($enVarName)
#@         }
#@ 
#@ 	# 2. In the package script directory registered within the
#@ 	#    configuration of the package itself.
#@ 
#@ 	catch {
#@ 	    lappend dirs [::${basename}::pkgconfig get scriptdir,runtime]
#@ 	}
#@ 
#@ 	# 3. Relative to auto_path directories.  This checks relative to the
#@ 	# Tcl library as well as allowing loading of libraries added to the
#@ 	# auto_path that is not relative to the core library or binary paths.
#@ 	foreach d $auto_path {
#@ 	    lappend dirs [file join $d $basename$version]
#@ 	    if {$tcl_platform(platform) eq "unix"
#@ 		    && $tcl_platform(os) eq "Darwin"} {
#@ 		# 4. On MacOSX, check the Resources/Scripts subdir too
#@ 		lappend dirs [file join $d $basename$version Resources Scripts]
#@ 	    }
#@ 	}
#@ 
#@ 	# 3. Various locations relative to the executable
#@ 	# ../lib/foo1.0		(From bin directory in install hierarchy)
#@ 	# ../../lib/foo1.0	(From bin/arch directory in install hierarchy)
#@ 	# ../library		(From unix directory in build hierarchy)
#@ 	#
#@ 	# Remaining locations are out of date (when relevant, they ought to be
#@ 	# covered by the $::auto_path seach above) and disabled.
#@ 	#
#@ 	# ../../library		(From unix/arch directory in build hierarchy)
#@ 	# ../../foo1.0.1/library
#@ 	#		(From unix directory in parallel build hierarchy)
#@ 	# ../../../foo1.0.1/library
#@ 	#		(From unix/arch directory in parallel build hierarchy)
#@ 
#@         set parentDir [file dirname [file dirname [info nameofexecutable]]]
#@         set grandParentDir [file dirname $parentDir]
#@         lappend dirs [file join $parentDir lib $basename$version]
#@         lappend dirs [file join $grandParentDir lib $basename$version]
#@         lappend dirs [file join $parentDir library]
#@ 	if {0} {
#@ 	    lappend dirs [file join $grandParentDir library]
#@ 	    lappend dirs [file join $grandParentDir $basename$patch library]
#@ 	    lappend dirs [file join [file dirname $grandParentDir] \
#@ 			      $basename$patch library]
#@ 	}
#@     }
#@     # uniquify $dirs in order
#@     array set seen {}
#@     foreach i $dirs {
#@ 	# Make sure $i is unique under normalization. Avoid repeated [source].
#@ 	if {[interp issafe]} {
#@ 	    # Safe interps have no [file normalize].
#@ 	    set norm $i
#@ 	} else {
#@ 	    set norm [file normalize $i]
#@ 	}
#@ 	if {[info exists seen($norm)]} {
#@ 	    continue
#@ 	}
#@ 	set seen($norm) {}
#@ 
#@         set the_library $i
#@         set file [file join $i $initScript]
#@ 
#@ 	# source everything when in a safe interpreter because we have a
#@ 	# source command, but no file exists command
#@ 
#@         if {[interp issafe] || [file exists $file]} {
#@             if {![catch {uplevel #0 [list source $file]} msg opts]} {
#@                 return
#@             }
#@ 	    append errors "$file: $msg\n"
#@ 	    append errors [dict get $opts -errorinfo]\n
#@         }
#@     }
#@     unset -nocomplain the_library
#@     set msg "Can't find a usable $initScript in the following directories: \n"
#@     append msg "    $dirs\n\n"
#@     append msg "$errors\n\n"
#@     append msg "This probably means that $basename wasn't installed properly.\n"
#@     error $msg
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # The following procedures are used to generate the tclIndex file from Tcl
#@ # source files.  They use a special safe interpreter to parse Tcl source
#@ # files, writing out index entries as "proc" commands are encountered.  This
#@ # implementation won't work in a safe interpreter, since a safe interpreter
#@ # can't create the special parser and mess with its commands.
#@ 
#@ if {[interp issafe]} {
#@     return	;# Stop sourcing the file here
#@ }
#@ 
#@ # auto_mkindex --
#@ # Regenerate a tclIndex file from Tcl source files.  Takes as argument the
#@ # name of the directory in which the tclIndex file is to be placed, followed
#@ # by any number of glob patterns to use in that directory to locate all of the
#@ # relevant files.
#@ #
#@ # Arguments:
#@ # dir -		Name of the directory in which to create an index.
#@ 
#@ # args -	Any number of additional arguments giving the names of files
#@ #		within dir.  If no additional are given auto_mkindex will look
#@ #		for *.tcl.
#@ 
#@ proc auto_mkindex {dir args} {
#@     if {[interp issafe]} {
#@         error "can't generate index within safe interpreter"
#@     }
#@ 
#@     set oldDir [pwd]
#@     cd $dir
#@ 
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {![llength $args]} {
#@ 	set args *.tcl
#@     }
#@ 
#@     auto_mkindex_parser::init
#@     foreach file [lsort [glob -- {*}$args]] {
#@ 	try {
#@ 	    append index [auto_mkindex_parser::mkindex $file]
#@ 	} on error {msg opts} {
#@ 	    cd $oldDir
#@ 	    return -options $opts $msg
#@ 	}
#@     }
#@     auto_mkindex_parser::cleanup
#@ 
#@     set fid [open "tclIndex" w]
#@     puts -nonewline $fid $index
#@     close $fid
#@     cd $oldDir
#@ }
#@ 
#@ # Original version of auto_mkindex that just searches the source code for
#@ # "proc" at the beginning of the line.
#@ 
#@ proc auto_mkindex_old {dir args} {
#@     set oldDir [pwd]
#@     cd $dir
#@     set dir [pwd]
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {![llength $args]} {
#@ 	set args *.tcl
#@     }
#@     foreach file [lsort [glob -- {*}$args]] {
#@ 	set f ""
#@ 	set error [catch {
#@ 	    set f [open $file]
#@ 	    fconfigure $f -eofchar \032
#@ 	    while {[gets $f line] >= 0} {
#@ 		if {[regexp {^proc[ 	]+([^ 	]*)} $line match procName]} {
#@ 		    set procName [lindex [auto_qualify $procName "::"] 0]
#@ 		    append index "set [list auto_index($procName)]"
#@ 		    append index " \[list source \[file join \$dir [list $file]\]\]\n"
#@ 		}
#@ 	    }
#@ 	    close $f
#@ 	} msg opts]
#@ 	if {$error} {
#@ 	    catch {close $f}
#@ 	    cd $oldDir
#@ 	    return -options $opts $msg
#@ 	}
#@     }
#@     set f ""
#@     set error [catch {
#@ 	set f [open tclIndex w]
#@ 	puts -nonewline $f $index
#@ 	close $f
#@ 	cd $oldDir
#@     } msg opts]
#@     if {$error} {
#@ 	catch {close $f}
#@ 	cd $oldDir
#@ 	error $msg $info $code
#@ 	return -options $opts $msg
#@     }
#@ }
#@ 
#@ # Create a safe interpreter that can be used to parse Tcl source files
#@ # generate a tclIndex file for autoloading.  This interp contains commands for
#@ # things that need index entries.  Each time a command is executed, it writes
#@ # an entry out to the index file.
#@ 
#@ namespace eval auto_mkindex_parser {
#@     variable parser ""          ;# parser used to build index
#@     variable index ""           ;# maintains index as it is built
#@     variable scriptFile ""      ;# name of file being processed
#@     variable contextStack ""    ;# stack of namespace scopes
#@     variable imports ""         ;# keeps track of all imported cmds
#@     variable initCommands       ;# list of commands that create aliases
#@     if {![info exists initCommands]} {
#@ 	set initCommands [list]
#@     }
#@ 
#@     proc init {} {
#@ 	variable parser
#@ 	variable initCommands
#@ 
#@ 	if {![interp issafe]} {
#@ 	    set parser [interp create -safe]
#@ 	    $parser hide info
#@ 	    $parser hide rename
#@ 	    $parser hide proc
#@ 	    $parser hide namespace
#@ 	    $parser hide eval
#@ 	    $parser hide puts
#@ 	    foreach ns [$parser invokehidden namespace children ::] {
#@ 		# MUST NOT DELETE "::tcl" OR BAD THINGS HAPPEN!
#@ 		if {$ns eq "::tcl"} continue
#@ 		$parser invokehidden namespace delete $ns
#@ 	    }
#@ 	    foreach cmd [$parser invokehidden info commands ::*] {
#@ 		$parser invokehidden rename $cmd {}
#@ 	    }
#@ 	    $parser invokehidden proc unknown {args} {}
#@ 
#@ 	    # We'll need access to the "namespace" command within the
#@ 	    # interp.  Put it back, but move it out of the way.
#@ 
#@ 	    $parser expose namespace
#@ 	    $parser invokehidden rename namespace _%@namespace
#@ 	    $parser expose eval
#@ 	    $parser invokehidden rename eval _%@eval
#@ 
#@ 	    # Install all the registered psuedo-command implementations
#@ 
#@ 	    foreach cmd $initCommands {
#@ 		eval $cmd
#@ 	    }
#@ 	}
#@     }
#@     proc cleanup {} {
#@ 	variable parser
#@ 	interp delete $parser
#@ 	unset parser
#@     }
#@ }
#@ 
#@ # auto_mkindex_parser::mkindex --
#@ #
#@ # Used by the "auto_mkindex" command to create a "tclIndex" file for the given
#@ # Tcl source file.  Executes the commands in the file, and handles things like
#@ # the "proc" command by adding an entry for the index file.  Returns a string
#@ # that represents the index file.
#@ #
#@ # Arguments:
#@ #	file	Name of Tcl source file to be indexed.
#@ 
#@ proc auto_mkindex_parser::mkindex {file} {
#@     variable parser
#@     variable index
#@     variable scriptFile
#@     variable contextStack
#@     variable imports
#@ 
#@     set scriptFile $file
#@ 
#@     set fid [open $file]
#@     fconfigure $fid -eofchar \032
#@     set contents [read $fid]
#@     close $fid
#@ 
#@     # There is one problem with sourcing files into the safe interpreter:
#@     # references like "$x" will fail since code is not really being executed
#@     # and variables do not really exist.  To avoid this, we replace all $ with
#@     # \0 (literally, the null char) later, when getting proc names we will
#@     # have to reverse this replacement, in case there were any $ in the proc
#@     # name.  This will cause a problem if somebody actually tries to have a \0
#@     # in their proc name.  Too bad for them.
#@     set contents [string map [list \$ \0] $contents]
#@ 
#@     set index ""
#@     set contextStack ""
#@     set imports ""
#@ 
#@     $parser eval $contents
#@ 
#@     foreach name $imports {
#@         catch {$parser eval [list _%@namespace forget $name]}
#@     }
#@     return $index
#@ }
#@ 
#@ # auto_mkindex_parser::hook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the child interpreter
#@ # used by the mkindex parser.  The command is evaluated in the parent
#@ # interpreter, and can use the variable auto_mkindex_parser::parser to get to
#@ # the child
#@ 
#@ proc auto_mkindex_parser::hook {cmd} {
#@     variable initCommands
#@ 
#@     lappend initCommands $cmd
#@ }
#@ 
#@ # auto_mkindex_parser::slavehook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the child interpreter
#@ # used by the mkindex parser.  The command is evaluated in the child
#@ # interpreter.
#@ 
#@ proc auto_mkindex_parser::slavehook {cmd} {
#@     variable initCommands
#@ 
#@     # The $parser variable is defined to be the name of the child interpreter
#@     # when this command is used later.
#@ 
#@     lappend initCommands "\$parser eval [list $cmd]"
#@ }
#@ 
#@ # auto_mkindex_parser::command --
#@ #
#@ # Registers a new command with the "auto_mkindex_parser" interpreter that
#@ # parses Tcl files.  These commands are fake versions of things like the
#@ # "proc" command.  When you execute them, they simply write out an entry to a
#@ # "tclIndex" file for auto-loading.
#@ #
#@ # This procedure allows extensions to register their own commands with the
#@ # auto_mkindex facility.  For example, a package like [incr Tcl] might
#@ # register a "class" command so that class definitions could be added to a
#@ # "tclIndex" file for auto-loading.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::command {name arglist body} {
#@     hook [list auto_mkindex_parser::commandInit $name $arglist $body]
#@ }
#@ 
#@ # auto_mkindex_parser::commandInit --
#@ #
#@ # This does the actual work set up by auto_mkindex_parser::command. This is
#@ # called when the interpreter used by the parser is created.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::commandInit {name arglist body} {
#@     variable parser
#@ 
#@     set ns [namespace qualifiers $name]
#@     set tail [namespace tail $name]
#@     if {$ns eq ""} {
#@         set fakeName [namespace current]::_%@fake_$tail
#@     } else {
#@         set fakeName [namespace current]::[string map {:: _} _%@fake_$name]
#@     }
#@     proc $fakeName $arglist $body
#@ 
#@     # YUK!  Tcl won't let us alias fully qualified command names, so we can't
#@     # handle names like "::itcl::class".  Instead, we have to build procs with
#@     # the fully qualified names, and have the procs point to the aliases.
#@ 
#@     if {[string match *::* $name]} {
#@         set exportCmd [list _%@namespace export [namespace tail $name]]
#@         $parser eval [list _%@namespace eval $ns $exportCmd]
#@ 
#@ 	# The following proc definition does not work if you want to tolerate
#@ 	# space or something else diabolical in the procedure name, (i.e.,
#@ 	# space in $alias). The following does not work:
#@ 	#   "_%@eval {$alias} \$args"
#@ 	# because $alias gets concat'ed to $args.  The following does not work
#@ 	# because $cmd is somehow undefined
#@ 	#   "set cmd {$alias} \; _%@eval {\$cmd} \$args"
#@ 	# A gold star to someone that can make test autoMkindex-3.3 work
#@ 	# properly
#@ 
#@         set alias [namespace tail $fakeName]
#@         $parser invokehidden proc $name {args} "_%@eval {$alias} \$args"
#@         $parser alias $alias $fakeName
#@     } else {
#@         $parser alias $name $fakeName
#@     }
#@     return
#@ }
#@ 
#@ # auto_mkindex_parser::fullname --
#@ #
#@ # Used by commands like "proc" within the auto_mkindex parser.  Returns the
#@ # qualified namespace name for the "name" argument.  If the "name" does not
#@ # start with "::", elements are added from the current namespace stack to
#@ # produce a qualified name.  Then, the name is examined to see whether or not
#@ # it should really be qualified.  If the name has more than the leading "::",
#@ # it is returned as a fully qualified name.  Otherwise, it is returned as a
#@ # simple name.  That way, the Tcl autoloader will recognize it properly.
#@ #
#@ # Arguments:
#@ # name -		Name that is being added to index.
#@ 
#@ proc auto_mkindex_parser::fullname {name} {
#@     variable contextStack
#@ 
#@     if {![string match ::* $name]} {
#@         foreach ns $contextStack {
#@             set name "${ns}::$name"
#@             if {[string match ::* $name]} {
#@                 break
#@             }
#@         }
#@     }
#@ 
#@     if {[namespace qualifiers $name] eq ""} {
#@         set name [namespace tail $name]
#@     } elseif {![string match ::* $name]} {
#@         set name "::$name"
#@     }
#@ 
#@     # Earlier, mkindex replaced all $'s with \0.  Now, we have to reverse that
#@     # replacement.
#@     return [string map [list \0 \$] $name]
#@ }
#@ 
#@ # auto_mkindex_parser::indexEntry --
#@ #
#@ # Used by commands like "proc" within the auto_mkindex parser to add a
#@ # correctly-quoted entry to the index. This is shared code so it is done
#@ # *right*, in one place.
#@ #
#@ # Arguments:
#@ # name -		Name that is being added to index.
#@ 
#@ proc auto_mkindex_parser::indexEntry {name} {
#@     variable index
#@     variable scriptFile
#@ 
#@     # We convert all metacharacters to their backslashed form, and pre-split
#@     # the file name that we know about (which will be a proper list, and so
#@     # correctly quoted).
#@ 
#@     set name [string range [list \}[fullname $name]] 2 end]
#@     set filenameParts [file split $scriptFile]
#@ 
#@     append index [format \
#@ 	    {set auto_index(%s) [list source [file join $dir %s]]%s} \
#@ 	    $name $filenameParts \n]
#@     return
#@ }
#@ 
#@ if {[llength $::auto_mkindex_parser::initCommands]} {
#@     return
#@ }
#@ 
#@ # Register all of the procedures for the auto_mkindex parser that will build
#@ # the "tclIndex" file.
#@ 
#@ # AUTO MKINDEX:  proc name arglist body
#@ # Adds an entry to the auto index list for the given procedure name.
#@ 
#@ auto_mkindex_parser::command proc {name args} {
#@     indexEntry $name
#@ }
#@ 
#@ # Conditionally add support for Tcl byte code files.  There are some tricky
#@ # details here.  First, we need to get the tbcload library initialized in the
#@ # current interpreter.  We cannot load tbcload into the child until we have
#@ # done so because it needs access to the tcl_patchLevel variable.  Second,
#@ # because the package index file may defer loading the library until we invoke
#@ # a command, we need to explicitly invoke auto_load to force it to be loaded.
#@ # This should be a noop if the package has already been loaded
#@ 
#@ auto_mkindex_parser::hook {
#@     try {
#@ 	package require tbcload
#@     } on error {} {
#@ 	# OK, don't have it so do nothing
#@     } on ok {} {
#@ 	if {[namespace which -command tbcload::bcproc] eq ""} {
#@ 	    auto_load tbcload::bcproc
#@ 	}
#@ 	load {} tbcload $auto_mkindex_parser::parser
#@ 
#@ 	# AUTO MKINDEX:  tbcload::bcproc name arglist body
#@ 	# Adds an entry to the auto index list for the given pre-compiled
#@ 	# procedure name.
#@ 
#@ 	auto_mkindex_parser::commandInit tbcload::bcproc {name args} {
#@ 	    indexEntry $name
#@ 	}
#@     }
#@ }
#@ 
#@ # AUTO MKINDEX:  namespace eval name command ?arg arg...?
#@ # Adds the namespace name onto the context stack and evaluates the associated
#@ # body of commands.
#@ #
#@ # AUTO MKINDEX:  namespace import ?-force? pattern ?pattern...?
#@ # Performs the "import" action in the parser interpreter.  This is important
#@ # for any commands contained in a namespace that affect the index.  For
#@ # example, a script may say "itcl::class ...", or it may import "itcl::*" and
#@ # then say "class ...".  This procedure does the import operation, but keeps
#@ # track of imported patterns so we can remove the imports later.
#@ 
#@ auto_mkindex_parser::command namespace {op args} {
#@     switch -- $op {
#@         eval {
#@             variable parser
#@             variable contextStack
#@ 
#@             set name [lindex $args 0]
#@             set args [lrange $args 1 end]
#@ 
#@             set contextStack [linsert $contextStack 0 $name]
#@ 	    $parser eval [list _%@namespace eval $name] $args
#@             set contextStack [lrange $contextStack 1 end]
#@         }
#@         import {
#@             variable parser
#@             variable imports
#@             foreach pattern $args {
#@                 if {$pattern ne "-force"} {
#@                     lappend imports $pattern
#@                 }
#@             }
#@             catch {$parser eval "_%@namespace import $args"}
#@         }
#@ 	ensemble {
#@ 	    variable parser
#@ 	    variable contextStack
#@ 	    if {[lindex $args 0] eq "create"} {
#@ 		set name ::[join [lreverse $contextStack] ::]
#@ 		catch {
#@ 		    set name [dict get [lrange $args 1 end] -command]
#@ 		    if {![string match ::* $name]} {
#@ 			set name ::[join [lreverse $contextStack] ::]$name
#@ 		    }
#@ 		    regsub -all ::+ $name :: name
#@ 		}
#@ 		# create artifical proc to force an entry in the tclIndex
#@ 		$parser eval [list ::proc $name {} {}]
#@ 	    }
#@ 	}
#@     }
#@ }
#@ 
#@ # AUTO MKINDEX:  oo::class create name ?definition?
#@ # Adds an entry to the auto index list for the given class name.
#@ auto_mkindex_parser::command oo::class {op name {body ""}} {
#@     if {$op eq "create"} {
#@ 	indexEntry $name
#@     }
#@ }
#@ auto_mkindex_parser::command class {op name {body ""}} {
#@     if {$op eq "create"} {
#@ 	indexEntry $name
#@     }
#@ }
#@ 
#@ return
#@ # -- End source /home/tools/synopsys/prime/T-2022.03-SP3/auxx/tcllib/lib/tcl8.6/auto.tcl

#@ 
#@ #
#@ # USAGE:  itcl::body name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach __cmd {itcl::body body} {
#@     auto_mkindex_parser::command $__cmd {name arglist body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  itcl::configbody name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach __cmd {itcl::configbody configbody} {
#@     auto_mkindex_parser::command $__cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  ensemble name ?body?
#@ # Adds an entry to the auto index list for the given ensemble name.
#@ #
#@ foreach __cmd {itcl::ensemble ensemble} {
#@     auto_mkindex_parser::command $__cmd {name {body ""}} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  public arg ?arg arg...?
#@ #         protected arg ?arg arg...?
#@ #         private arg ?arg arg...?
#@ #
#@ # Evaluates the arguments as commands, so we can recognize proc
#@ # declarations within classes.
#@ #
#@ foreach __cmd {public protected private} {
#@     auto_mkindex_parser::command $__cmd {args} {
#@         variable parser
#@         $parser eval $args
#@     }
#@ }
#@ 
#@ # SF bug #246 unset variable __cmd to avoid problems in user programs!!
#@ unset __cmd
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_import
#@ # ----------------------------------------------------------------------
#@ # This procedure overrides the usual "auto_import" function in the
#@ # Tcl library.  It is invoked during "namespace import" to make see
#@ # if the imported commands reside in an autoloaded library.  If so,
#@ # stubs are created to represent the commands.  Executing a stub
#@ # later on causes the real implementation to be autoloaded.
#@ #
#@ # Arguments -
#@ # pattern	The pattern of commands being imported (like "foo::*")
#@ #               a canonical namespace as returned by [namespace current]
#@ 
#@ proc auto_import {pattern} {
#@     global auto_index
#@ 
#@     set ns [uplevel namespace current]
#@     set patternList [auto_qualify $pattern $ns]
#@ 
#@     auto_load_index
#@ 
#@     foreach pattern $patternList {
#@         foreach name [array names auto_index $pattern] {
#@             if {"" == [info commands $name]} {
#@                 ::itcl::import::stub create $name
#@             }
#@         }
#@     }
#@ }
#@ # -- End source /home/tools/synopsys/prime/T-2022.03-SP3/auxx/tcllib/lib/itcl4.2.1/itcl.tcl

source -echo -verbose ptpx/scripts_pt/pt.tcl
#@ # -- Starting source ptpx/scripts_pt/pt.tcl

#@ #################################################################################
#@ # PrimeTime Reference Methodology Script
#@ # Script: pt.tcl
#@ # Version: M-2019.03-SP3 
#@ ################################################################################
#@ 
#@ ##################################################################
#@ #    Source common and pt_setup.tcl File                         #
#@ ##################################################################
#@ 
#@ source common/common.tcl
#@ # -- Starting source common/common.tcl

#@ set PROJECT_DIR     $env(PROJECT_DIR) 
#@ set RTL_DIR         "../.bender/git/checkouts/cv32e40p-703290f15a6e8974/rtl"
#@ set CONSTRAINTS_DIR         "../.bender/git/checkouts/cv32e40p-703290f15a6e8974/constraints"
#@ set DESIGN_NAME     "cv32e40p_core"
#@ 
#@ #####################################################################
#@ # REPORT POWER ESTIMATE
#@ #####################################################################
#@ 
#@ set REPORT_POWER    "ptpx/reports_pt/results"
#@ 
#@ 
#@ #####################################################################
#@ # REPORT SYNTHESIS
#@ #####################################################################
#@ 
#@ set REPORT_SYN          "syn/reports_syn/results"
#@ set REPORT_SYN_CG       "syn/reports_syn/results_CG"
#@ 
#@ # -- End source common/common.tcl

#@ 
#@ set target_library  {/home/dkits/FreePDK45/NangateOpenCellLibrary_PDKv1_3_v2010_12/Front_End/db/NLDM/NangateOpenCellLibrary_typical.db }
#@ set link_library    {* /home/dkits/FreePDK45/NangateOpenCellLibrary_PDKv1_3_v2010_12/Front_End/db/NLDM/NangateOpenCellLibrary_typical.db  }
#@ 
#@ set ACTIVITY_FILE "ptpx/scripts_pt/simulation.saif"
#@ 
#@ 
#@ 
#@ ##################################################################
#@ #    Search Path, Library and Operating Condition Section        #
#@ ##################################################################
#@ 
#@ 
#@ set power_enable_analysis true 
#@ set power_enable_multi_rail_analysis true 
#@ # set power_analysis_mode time_based 
#@ set power_analysis_mode averaged
#@ 
#@ set report_default_significant_digits 3 ;
#@ set sh_source_uses_search_path true ;
#@ set search_path ". $search_path" ;
#@ 
#@ 
#@ ##################################################################
#@ #    Netlist Reading Section                                     #
#@ ##################################################################
#@ # set link_path "* $link_path"
#@ read_verilog $REPORT_SYN/cv32e40p_core_netlist.v
#@ 
#@ current_design $DESIGN_NAME 
#@ link
#@ 
#@ file mkdir ptpx/reports_pt/results
#@ ##################################################################
#@ #    Back Annotation Section                                     #
#@ ##################################################################
#@ # if { [info exists PARASITIC_PATHS] && [info exists PARASITIC_FILES] } {
#@ # foreach para_path $PARASITIC_PATHS para_file $PARASITIC_FILES {
#@ #    if {[string compare $para_path $DESIGN_NAME] == 0} {
#@ #       read_parasitics $para_file 
#@ #    } else {
#@ #       read_parasitics -path $para_path $para_file 
#@ #    }
#@ # }
#@ # }
#@ 
#@ 
#@ 
#@ ##################################################################
#@ #    Reading Constraints Section                                 #
#@ ##################################################################
#@ 
#@ source -echo -verbose $REPORT_SYN/cv32e40p_core_SDC_OUTPUT_FILE.sdc
#@ # -- Starting source syn/reports_syn/results/cv32e40p_core_SDC_OUTPUT_FILE.sdc

#@ ###################################################################
#@ 
#@ # Created by write_sdc on Fri Feb 14 13:44:39 2025
#@ 
#@ ###################################################################
#@ set sdc_version 2.1
#@ 
#@ set_units -time ns -resistance MOhm -capacitance fF -voltage V -current mA
#@ create_clock [get_ports clk_i]  -period 5  -waveform {0 2.5}
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[31]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[30]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[29]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[28]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[27]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[26]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[25]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[24]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[23]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[22]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[21]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[20]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[19]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[18]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[17]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[16]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[15]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[14]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[13]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[12]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[11]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[10]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[9]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[8]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[7]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[6]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[5]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[4]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[3]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[2]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[1]}]
#@ set_input_delay -clock clk_i  2.5  [get_ports {irq_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports instr_gnt_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports instr_rvalid_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {instr_rdata_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports data_gnt_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports data_rvalid_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {data_rdata_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports debug_req_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {boot_addr_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {mtvec_addr_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_halt_addr_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {hart_id_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {dm_exception_addr_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports rst_ni]
#@ set_input_delay -clock clk_i  0.5  [get_ports pulp_clock_en_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports scan_cg_en_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports apu_gnt_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports apu_rvalid_i]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[31]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[30]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[29]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[28]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[27]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[26]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[25]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[24]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[23]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[22]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[21]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[20]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[19]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[18]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[17]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[16]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[15]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[14]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[13]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[12]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[11]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[10]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[9]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[8]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[7]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[6]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[5]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_result_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_flags_i[4]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_flags_i[3]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_flags_i[2]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_flags_i[1]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports {apu_flags_i[0]}]
#@ set_input_delay -clock clk_i  0.5  [get_ports fetch_enable_i]
#@ set_output_delay -clock clk_i  3  [get_ports irq_ack_o]
#@ set_output_delay -clock clk_i  3  [get_ports {irq_id_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {irq_id_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {irq_id_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {irq_id_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {irq_id_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports instr_req_o]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[31]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[30]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[29]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[28]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[27]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[26]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[25]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[24]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[23]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[22]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[21]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[20]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[19]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[18]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[17]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[16]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[15]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[14]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[13]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[12]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[11]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[10]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[9]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[8]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[7]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[6]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {instr_addr_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports data_req_o]
#@ set_output_delay -clock clk_i  3  [get_ports data_we_o]
#@ set_output_delay -clock clk_i  3  [get_ports {data_be_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_be_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_be_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_be_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[31]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[30]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[29]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[28]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[27]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[26]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[25]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[24]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[23]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[22]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[21]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[20]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[19]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[18]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[17]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[16]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[15]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[14]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[13]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[12]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[11]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[10]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[9]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[8]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[7]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[6]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_addr_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[31]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[30]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[29]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[28]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[27]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[26]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[25]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[24]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[23]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[22]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[21]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[20]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[19]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[18]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[17]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[16]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[15]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[14]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[13]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[12]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[11]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[10]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[9]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[8]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[7]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[6]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {data_wdata_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports apu_req_o]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[95]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[94]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[93]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[92]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[91]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[90]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[89]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[88]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[87]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[86]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[85]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[84]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[83]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[82]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[81]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[80]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[79]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[78]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[77]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[76]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[75]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[74]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[73]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[72]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[71]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[70]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[69]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[68]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[67]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[66]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[65]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[64]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[63]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[62]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[61]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[60]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[59]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[58]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[57]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[56]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[55]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[54]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[53]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[52]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[51]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[50]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[49]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[48]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[47]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[46]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[45]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[44]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[43]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[42]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[41]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[40]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[39]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[38]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[37]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[36]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[35]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[34]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[33]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[32]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[31]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[30]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[29]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[28]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[27]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[26]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[25]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[24]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[23]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[22]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[21]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[20]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[19]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[18]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[17]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[16]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[15]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[14]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[13]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[12]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[11]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[10]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[9]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[8]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[7]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[6]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_operands_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_op_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[14]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[13]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[12]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[11]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[10]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[9]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[8]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[7]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[6]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[5]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[4]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[3]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[2]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[1]}]
#@ set_output_delay -clock clk_i  3  [get_ports {apu_flags_o[0]}]
#@ set_output_delay -clock clk_i  3  [get_ports debug_havereset_o]
#@ set_output_delay -clock clk_i  3  [get_ports debug_running_o]
#@ set_output_delay -clock clk_i  3  [get_ports debug_halted_o]
#@ set_output_delay -clock clk_i  1.25  [get_ports core_sleep_o]
#@ # -- End source syn/reports_syn/results/cv32e40p_core_SDC_OUTPUT_FILE.sdc

#@ 
#@ 
#@ ##TAG COMMENt: set eco_report_unfixed_reason_max_endpoints for ECO timing(M-2017.06-SP2)
#@ 
#@ 
#@ 
#@ ##################################################################
#@ #    Update_timing and check_timing Section                      #
#@ ##################################################################
#@ 
#@ update_timing -full
#@ check_timing -verbose > $REPORT_POWER/${DESIGN_NAME}_check_timing.report
#@ 
#@ 
#@ 
#@ ##################################################################
#@ #   Writing an Reduced Resource ECO design                       #
#@ ##################################################################
#@ # PrimeTime has the capability to write out an ECO design which 
#@ # is a smaller version of the orginal design ECO can be performed
#@ # with fewer compute resources.
#@ #
#@ # Writes an ECO design  that  preserves  the  specified  violation
#@ # types  compared to those in the original design. You can specify
#@ #  one or more of the following violation types:
#@ #              o setup - Preserves setup timing results.
#@ #              o hold - Preserves hold timing results.
#@ #              o max_transistion - Preserves max_transition results.
#@ #              o max_capacitance - Preserves max_capacitance results.
#@ #              o max_fanout - Preserves max_fanout results.
#@ #              o noise - Preserves noise results.
#@ #              o timing - Preserves setup and hold timing results.
#@ #              o drc  -  Preserves  max_transition,  max_capacitance,  
#@ #                and max fanout results.
#@ # There is also capability to write out specific endpoints with
#@ # the -endpoints options.
#@ #
#@ # In DMSA analyis the RRECO design is written out relative to all
#@ # scenarios enabled for analysis.
#@ # 
#@ # To create a RRECO design the user should perform the following 
#@ # command and include violations types which the user is interested
#@ # in fixing, for example for setup and hold.
#@ # 
#@ # write_eco_design  -type {setup hold} my_RRECO_design
#@ #
#@ # Once the RRECO design is created, the user then would invoke 
#@ # PrimeTIme ECO in a seperate session and access the appropriate
#@ # resourses and then read in the RRECO to perform the ECO
#@ # 
#@ # set_host_options ....
#@ # start_hosts
#@ # read_eco_design my_RRECO_design
#@ # fix_eco...
#@ #
#@ # For more details please see man pages for write_eco_design
#@ # and read_eco design.
#@ 
#@ ##################################################################
#@ #    Report_timing Section                                       #
#@ ##################################################################
#@ report_global_timing > $REPORT_POWER/${DESIGN_NAME}_report_global_timing.report
#@ # report_clock -skew -attribute > $REPORT_POWER/${DESIGN_NAME}_report_clock.report 
#@ report_analysis_coverage > $REPORT_POWER/${DESIGN_NAME}_report_analysis_coverage.report
#@ report_timing -slack_lesser_than 0.0 -delay min_max -nosplit -input -net  > $REPORT_POWER/${DESIGN_NAME}_report_timing.report
#@ 
#@ 
#@ ##################################################################  
#@ #    Power Switching Activity Annotation Section                 #  
#@ ##################################################################  
#@ #read_vcd $ACTIVITY_FILE -strip_path $STRIP_PATH         
#@ read_saif $ACTIVITY_FILE         
#@ report_switching_activity -list_not_annotated           
#@ 
#@ ##################################################################
#@ #    Power Analysis Section                                      #
#@ ##################################################################
#@ 
#@ ## set power analysis options                                   
#@ # set_power_analysis_options -waveform_format fsdb -waveform_output $REPORT_POWER/wave
#@ # set_power_analysis_options -waveform_output $REPORT_POWER/wave
#@ 
#@ ## run power analysis
#@ check_power   > $REPORT_POWER/${DESIGN_NAME}_check_power.report
#@ update_power  
#@ 
#@ ## report_power
#@ report_power -hier -verbose > $REPORT_POWER/${DESIGN_NAME}_report_power.report
#@ # report_power > $REPORT_POWER/${DESIGN_NAME}_report_power.report
#@ 
#@ # # Clock Gating & Vth Group Reporting Section
#@ # report_clock_gate_savings  
#@ 
#@ # Set Vth attribute for each library if not set already
#@ foreach_in_collection l [get_libs] {
#@         if {[get_attribute [get_lib $l] default_threshold_voltage_group] == ""} {
#@                 set lname [get_object_name [get_lib $l]]
#@                 set_user_attribute [get_lib $l] default_threshold_voltage_group $lname -class lib
#@         }
#@ }
#@ report_power -threshold_voltage_group > $REPORT_POWER/${DESIGN_NAME}_pwr.per_lib_leakage
#@ report_threshold_voltage_group > $REPORT_POWER/${DESIGN_NAME}_pwr.per_volt_threshold_group
#@ 
#@ 
#@ exit
#@ if { [namespace which -command __pre_quit_tcl_procs] == "::__pre_quit_tcl_procs" } {   __pre_quit_tcl_procs}

